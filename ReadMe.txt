Реализованный функционал SPA:
 1. Приложение реализовано по стандартной архитектуре, для верстки макета использован react-bootstrap v4,
    само приложение сделано с использованием react-redux.
 2. Логика: приложение делает ajax запрос на сервер, получает json с данными заказа, отображает список заказов,
    при клике на конкретный заказ справа выводятся детали, уже без отправки запроса на сервер.
    С сервера приходит не готовый к отображению json, поэтому в редьюсере, отвечающем за конкретный заказ реализована
    бизнес-логика: происходит подсчет общей суммы конкретного продукта (количества и стоимости), а также формируется
    отдельный стейт total, который отображает общую сумму заказа.
 3. бэкенд: задействовано API сайта jsonplaceholder, которое позволяет создать сервер, отправляющий соответствующий json
    согласно запроса. Базу данных делать не стал, т.к. очень ограничен по времени.

Допущения тестового задания:
 - верстка сделана для стандартного экрана ноутбука 15", адаптивность не проверял, на мобильную совместимость также не смотрел.
 - была мысль задействовать для отображения информации hash-роутер, но потом решил не усложнять задание, т.к. оно
   прекрасно реализуется и без оного.
 - на компоненты тоже не разбивал, т.к. приложение очень маленькое...

Стек технологий:
 - react;
 - redux;
 - react-bootstrap v4;
 - axios;
 - redux-thunk;
 - js ES6;
 - webpack;

